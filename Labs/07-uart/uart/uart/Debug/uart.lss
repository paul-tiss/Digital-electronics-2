
uart.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000030  00800100  00000610  000006a4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000610  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000045  00800130  00800130  000006d4  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000006d4  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000704  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000100  00000000  00000000  00000744  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000016e8  00000000  00000000  00000844  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000ab0  00000000  00000000  00001f2c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000a9a  00000000  00000000  000029dc  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000002ac  00000000  00000000  00003478  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000005a1  00000000  00000000  00003724  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000bbb  00000000  00000000  00003cc5  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000100  00000000  00000000  00004880  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 df 01 	jmp	0x3be	; 0x3be <__vector_13>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__vector_18>
  4c:	0c 94 81 00 	jmp	0x102	; 0x102 <__vector_19>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 f4 01 	jmp	0x3e8	; 0x3e8 <__vector_21>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e0 e1       	ldi	r30, 0x10	; 16
  7c:	f6 e0       	ldi	r31, 0x06	; 6
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a0 33       	cpi	r26, 0x30	; 48
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a0 e3       	ldi	r26, 0x30	; 48
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a5 37       	cpi	r26, 0x75	; 117
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 8b 01 	call	0x316	; 0x316 <main>
  9e:	0c 94 06 03 	jmp	0x60c	; 0x60c <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <__vector_18>:
    /* store buffer index */
    UART_RxTail = tmptail;

    UART_LastRxError = 0;
    return (lastRxError << 8) + data;
}/* uart_getc */
  a6:	1f 92       	push	r1
  a8:	0f 92       	push	r0
  aa:	0f b6       	in	r0, 0x3f	; 63
  ac:	0f 92       	push	r0
  ae:	11 24       	eor	r1, r1
  b0:	2f 93       	push	r18
  b2:	8f 93       	push	r24
  b4:	9f 93       	push	r25
  b6:	ef 93       	push	r30
  b8:	ff 93       	push	r31
  ba:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__DATA_REGION_ORIGIN__+0x60>
  be:	20 91 c6 00 	lds	r18, 0x00C6	; 0x8000c6 <__DATA_REGION_ORIGIN__+0x66>
  c2:	8c 71       	andi	r24, 0x1C	; 28
  c4:	e0 91 32 01 	lds	r30, 0x0132	; 0x800132 <UART_RxHead>
  c8:	ef 5f       	subi	r30, 0xFF	; 255
  ca:	ef 71       	andi	r30, 0x1F	; 31
  cc:	90 91 31 01 	lds	r25, 0x0131	; 0x800131 <UART_RxTail>
  d0:	e9 17       	cp	r30, r25
  d2:	39 f0       	breq	.+14     	; 0xe2 <__vector_18+0x3c>
  d4:	e0 93 32 01 	sts	0x0132, r30	; 0x800132 <UART_RxHead>
  d8:	f0 e0       	ldi	r31, 0x00	; 0
  da:	eb 5c       	subi	r30, 0xCB	; 203
  dc:	fe 4f       	sbci	r31, 0xFE	; 254
  de:	20 83       	st	Z, r18
  e0:	01 c0       	rjmp	.+2      	; 0xe4 <__vector_18+0x3e>
  e2:	82 e0       	ldi	r24, 0x02	; 2
  e4:	90 91 30 01 	lds	r25, 0x0130	; 0x800130 <__data_end>
  e8:	89 2b       	or	r24, r25
  ea:	80 93 30 01 	sts	0x0130, r24	; 0x800130 <__data_end>
  ee:	ff 91       	pop	r31
  f0:	ef 91       	pop	r30
  f2:	9f 91       	pop	r25
  f4:	8f 91       	pop	r24
  f6:	2f 91       	pop	r18
  f8:	0f 90       	pop	r0
  fa:	0f be       	out	0x3f, r0	; 63
  fc:	0f 90       	pop	r0
  fe:	1f 90       	pop	r1
 100:	18 95       	reti

00000102 <__vector_19>:
 102:	1f 92       	push	r1
 104:	0f 92       	push	r0
 106:	0f b6       	in	r0, 0x3f	; 63
 108:	0f 92       	push	r0
 10a:	11 24       	eor	r1, r1
 10c:	8f 93       	push	r24
 10e:	9f 93       	push	r25
 110:	ef 93       	push	r30
 112:	ff 93       	push	r31
 114:	90 91 34 01 	lds	r25, 0x0134	; 0x800134 <UART_TxHead>
 118:	80 91 33 01 	lds	r24, 0x0133	; 0x800133 <UART_TxTail>
 11c:	98 17       	cp	r25, r24
 11e:	69 f0       	breq	.+26     	; 0x13a <__vector_19+0x38>
 120:	e0 91 33 01 	lds	r30, 0x0133	; 0x800133 <UART_TxTail>
 124:	ef 5f       	subi	r30, 0xFF	; 255
 126:	ef 71       	andi	r30, 0x1F	; 31
 128:	e0 93 33 01 	sts	0x0133, r30	; 0x800133 <UART_TxTail>
 12c:	f0 e0       	ldi	r31, 0x00	; 0
 12e:	eb 5a       	subi	r30, 0xAB	; 171
 130:	fe 4f       	sbci	r31, 0xFE	; 254
 132:	80 81       	ld	r24, Z
 134:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__DATA_REGION_ORIGIN__+0x66>
 138:	05 c0       	rjmp	.+10     	; 0x144 <__vector_19+0x42>
 13a:	e1 ec       	ldi	r30, 0xC1	; 193
 13c:	f0 e0       	ldi	r31, 0x00	; 0
 13e:	80 81       	ld	r24, Z
 140:	8f 7d       	andi	r24, 0xDF	; 223
 142:	80 83       	st	Z, r24
 144:	ff 91       	pop	r31
 146:	ef 91       	pop	r30
 148:	9f 91       	pop	r25
 14a:	8f 91       	pop	r24
 14c:	0f 90       	pop	r0
 14e:	0f be       	out	0x3f, r0	; 63
 150:	0f 90       	pop	r0
 152:	1f 90       	pop	r1
 154:	18 95       	reti

00000156 <uart_init>:
 156:	10 92 34 01 	sts	0x0134, r1	; 0x800134 <UART_TxHead>
 15a:	10 92 33 01 	sts	0x0133, r1	; 0x800133 <UART_TxTail>
 15e:	10 92 32 01 	sts	0x0132, r1	; 0x800132 <UART_RxHead>
 162:	10 92 31 01 	sts	0x0131, r1	; 0x800131 <UART_RxTail>
 166:	99 23       	and	r25, r25
 168:	1c f4       	brge	.+6      	; 0x170 <uart_init+0x1a>
 16a:	22 e0       	ldi	r18, 0x02	; 2
 16c:	20 93 c0 00 	sts	0x00C0, r18	; 0x8000c0 <__DATA_REGION_ORIGIN__+0x60>
 170:	90 78       	andi	r25, 0x80	; 128
 172:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__DATA_REGION_ORIGIN__+0x65>
 176:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__DATA_REGION_ORIGIN__+0x64>
 17a:	88 e9       	ldi	r24, 0x98	; 152
 17c:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__DATA_REGION_ORIGIN__+0x61>
 180:	86 e0       	ldi	r24, 0x06	; 6
 182:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__DATA_REGION_ORIGIN__+0x62>
 186:	08 95       	ret

00000188 <uart_putc>:
void uart_putc(unsigned char data)
{
    unsigned char tmphead;


    tmphead = (UART_TxHead + 1) & UART_TX_BUFFER_MASK;
 188:	20 91 34 01 	lds	r18, 0x0134	; 0x800134 <UART_TxHead>
 18c:	2f 5f       	subi	r18, 0xFF	; 255
 18e:	2f 71       	andi	r18, 0x1F	; 31

    while (tmphead == UART_TxTail)
 190:	90 91 33 01 	lds	r25, 0x0133	; 0x800133 <UART_TxTail>
 194:	29 17       	cp	r18, r25
 196:	e1 f3       	breq	.-8      	; 0x190 <uart_putc+0x8>
    {
        ;/* wait for free space in buffer */
    }

    UART_TxBuf[tmphead] = data;
 198:	e2 2f       	mov	r30, r18
 19a:	f0 e0       	ldi	r31, 0x00	; 0
 19c:	eb 5a       	subi	r30, 0xAB	; 171
 19e:	fe 4f       	sbci	r31, 0xFE	; 254
 1a0:	80 83       	st	Z, r24
    UART_TxHead         = tmphead;
 1a2:	20 93 34 01 	sts	0x0134, r18	; 0x800134 <UART_TxHead>

    /* enable UDRE interrupt */
    UART0_CONTROL |= _BV(UART0_UDRIE);
 1a6:	e1 ec       	ldi	r30, 0xC1	; 193
 1a8:	f0 e0       	ldi	r31, 0x00	; 0
 1aa:	80 81       	ld	r24, Z
 1ac:	80 62       	ori	r24, 0x20	; 32
 1ae:	80 83       	st	Z, r24
 1b0:	08 95       	ret

000001b2 <uart_puts>:
 * Purpose:  transmit string to UART
 * Input:    string to be transmitted
 * Returns:  none
 **************************************************************************/
void uart_puts(const char *s)
{
 1b2:	cf 93       	push	r28
 1b4:	df 93       	push	r29
 1b6:	ec 01       	movw	r28, r24
    while (*s)
 1b8:	88 81       	ld	r24, Y
 1ba:	88 23       	and	r24, r24
 1bc:	31 f0       	breq	.+12     	; 0x1ca <uart_puts+0x18>
 1be:	21 96       	adiw	r28, 0x01	; 1
        uart_putc(*s++);
 1c0:	0e 94 c4 00 	call	0x188	; 0x188 <uart_putc>
 * Input:    string to be transmitted
 * Returns:  none
 **************************************************************************/
void uart_puts(const char *s)
{
    while (*s)
 1c4:	89 91       	ld	r24, Y+
 1c6:	81 11       	cpse	r24, r1
 1c8:	fb cf       	rjmp	.-10     	; 0x1c0 <uart_puts+0xe>
        uart_putc(*s++);
}/* uart_puts */
 1ca:	df 91       	pop	r29
 1cc:	cf 91       	pop	r28
 1ce:	08 95       	ret

000001d0 <toggle_e>:

    while ( (c = pgm_read_byte(progmem_s++)) )
    {
        lcd_putc(c);
    }
}/* lcd_puts_p */
 1d0:	29 9a       	sbi	0x05, 1	; 5
 1d2:	85 e0       	ldi	r24, 0x05	; 5
 1d4:	8a 95       	dec	r24
 1d6:	f1 f7       	brne	.-4      	; 0x1d4 <toggle_e+0x4>
 1d8:	00 00       	nop
 1da:	29 98       	cbi	0x05, 1	; 5
 1dc:	08 95       	ret

000001de <lcd_write>:
 1de:	cf 93       	push	r28
 1e0:	c8 2f       	mov	r28, r24
 1e2:	66 23       	and	r22, r22
 1e4:	11 f0       	breq	.+4      	; 0x1ea <lcd_write+0xc>
 1e6:	28 9a       	sbi	0x05, 0	; 5
 1e8:	01 c0       	rjmp	.+2      	; 0x1ec <lcd_write+0xe>
 1ea:	28 98       	cbi	0x05, 0	; 5
 1ec:	54 9a       	sbi	0x0a, 4	; 10
 1ee:	55 9a       	sbi	0x0a, 5	; 10
 1f0:	56 9a       	sbi	0x0a, 6	; 10
 1f2:	57 9a       	sbi	0x0a, 7	; 10
 1f4:	5f 98       	cbi	0x0b, 7	; 11
 1f6:	5e 98       	cbi	0x0b, 6	; 11
 1f8:	5d 98       	cbi	0x0b, 5	; 11
 1fa:	5c 98       	cbi	0x0b, 4	; 11
 1fc:	cc 23       	and	r28, r28
 1fe:	0c f4       	brge	.+2      	; 0x202 <lcd_write+0x24>
 200:	5f 9a       	sbi	0x0b, 7	; 11
 202:	c6 fd       	sbrc	r28, 6
 204:	5e 9a       	sbi	0x0b, 6	; 11
 206:	c5 fd       	sbrc	r28, 5
 208:	5d 9a       	sbi	0x0b, 5	; 11
 20a:	c4 fd       	sbrc	r28, 4
 20c:	5c 9a       	sbi	0x0b, 4	; 11
 20e:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <toggle_e>
 212:	5f 98       	cbi	0x0b, 7	; 11
 214:	5e 98       	cbi	0x0b, 6	; 11
 216:	5d 98       	cbi	0x0b, 5	; 11
 218:	5c 98       	cbi	0x0b, 4	; 11
 21a:	c3 fd       	sbrc	r28, 3
 21c:	5f 9a       	sbi	0x0b, 7	; 11
 21e:	c2 fd       	sbrc	r28, 2
 220:	5e 9a       	sbi	0x0b, 6	; 11
 222:	c1 fd       	sbrc	r28, 1
 224:	5d 9a       	sbi	0x0b, 5	; 11
 226:	c0 fd       	sbrc	r28, 0
 228:	5c 9a       	sbi	0x0b, 4	; 11
 22a:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <toggle_e>
 22e:	5c 9a       	sbi	0x0b, 4	; 11
 230:	5d 9a       	sbi	0x0b, 5	; 11
 232:	5e 9a       	sbi	0x0b, 6	; 11
 234:	5f 9a       	sbi	0x0b, 7	; 11
 236:	8f e7       	ldi	r24, 0x7F	; 127
 238:	9c e0       	ldi	r25, 0x0C	; 12
 23a:	01 97       	sbiw	r24, 0x01	; 1
 23c:	f1 f7       	brne	.-4      	; 0x23a <lcd_write+0x5c>
 23e:	00 c0       	rjmp	.+0      	; 0x240 <lcd_write+0x62>
 240:	00 00       	nop
 242:	cf 91       	pop	r28
 244:	08 95       	ret

00000246 <lcd_command>:
 246:	60 e0       	ldi	r22, 0x00	; 0
 248:	0e 94 ef 00 	call	0x1de	; 0x1de <lcd_write>
 24c:	08 95       	ret

0000024e <lcd_gotoxy>:
 24e:	61 11       	cpse	r22, r1
 250:	04 c0       	rjmp	.+8      	; 0x25a <lcd_gotoxy+0xc>
 252:	80 58       	subi	r24, 0x80	; 128
 254:	0e 94 23 01 	call	0x246	; 0x246 <lcd_command>
 258:	08 95       	ret
 25a:	80 54       	subi	r24, 0x40	; 64
 25c:	0e 94 23 01 	call	0x246	; 0x246 <lcd_command>
 260:	08 95       	ret

00000262 <lcd_clrscr>:
 262:	81 e0       	ldi	r24, 0x01	; 1
 264:	0e 94 23 01 	call	0x246	; 0x246 <lcd_command>
 268:	08 95       	ret

0000026a <lcd_putc>:
 26a:	61 e0       	ldi	r22, 0x01	; 1
 26c:	0e 94 ef 00 	call	0x1de	; 0x1de <lcd_write>
 270:	08 95       	ret

00000272 <lcd_puts>:
 272:	cf 93       	push	r28
 274:	df 93       	push	r29
 276:	ec 01       	movw	r28, r24
 278:	21 96       	adiw	r28, 0x01	; 1
 27a:	fc 01       	movw	r30, r24
 27c:	80 81       	ld	r24, Z
 27e:	88 23       	and	r24, r24
 280:	29 f0       	breq	.+10     	; 0x28c <lcd_puts+0x1a>
 282:	0e 94 35 01 	call	0x26a	; 0x26a <lcd_putc>
 286:	89 91       	ld	r24, Y+
 288:	81 11       	cpse	r24, r1
 28a:	fb cf       	rjmp	.-10     	; 0x282 <lcd_puts+0x10>
 28c:	df 91       	pop	r29
 28e:	cf 91       	pop	r28
 290:	08 95       	ret

00000292 <lcd_init>:
*                  LCD_DISP_ON_CURSOR      display on, cursor on
*                  LCD_DISP_CURSOR_BLINK   display on, cursor on flashing
*  Returns:  none
*************************************************************************/
void lcd_init(uint8_t dispAttr)
{
 292:	cf 93       	push	r28
 294:	c8 2f       	mov	r28, r24
        DDR(LCD_E_PORT)     |= _BV(LCD_E_PIN);
    }
    else
    {
        /* configure all port bits as output (LCD data and control lines on different ports */
        DDR(LCD_RS_PORT)    |= _BV(LCD_RS_PIN);
 296:	20 9a       	sbi	0x04, 0	; 4
        DDR(LCD_RW_PORT)    |= _BV(LCD_RW_PIN);
 298:	55 9a       	sbi	0x0a, 5	; 10
        DDR(LCD_E_PORT)     |= _BV(LCD_E_PIN);
 29a:	21 9a       	sbi	0x04, 1	; 4
        DDR(LCD_DATA0_PORT) |= _BV(LCD_DATA0_PIN);
 29c:	54 9a       	sbi	0x0a, 4	; 10
        DDR(LCD_DATA1_PORT) |= _BV(LCD_DATA1_PIN);
 29e:	55 9a       	sbi	0x0a, 5	; 10
        DDR(LCD_DATA2_PORT) |= _BV(LCD_DATA2_PIN);
 2a0:	56 9a       	sbi	0x0a, 6	; 10
        DDR(LCD_DATA3_PORT) |= _BV(LCD_DATA3_PIN);
 2a2:	57 9a       	sbi	0x0a, 7	; 10
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 2a4:	8f ef       	ldi	r24, 0xFF	; 255
 2a6:	99 ef       	ldi	r25, 0xF9	; 249
 2a8:	01 97       	sbiw	r24, 0x01	; 1
 2aa:	f1 f7       	brne	.-4      	; 0x2a8 <lcd_init+0x16>
 2ac:	00 c0       	rjmp	.+0      	; 0x2ae <lcd_init+0x1c>
 2ae:	00 00       	nop
    }
    delay(LCD_DELAY_BOOTUP); /* wait 16ms or more after power-on       */

    /* initial write to lcd is 8bit */
    LCD_DATA1_PORT |= _BV(LCD_DATA1_PIN); // LCD_FUNCTION>>4;
 2b0:	5d 9a       	sbi	0x0b, 5	; 11
    LCD_DATA0_PORT |= _BV(LCD_DATA0_PIN); // LCD_FUNCTION_8BIT>>4;
 2b2:	5c 9a       	sbi	0x0b, 4	; 11
    lcd_e_toggle();
 2b4:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <toggle_e>
 2b8:	8f e1       	ldi	r24, 0x1F	; 31
 2ba:	9e e4       	ldi	r25, 0x4E	; 78
 2bc:	01 97       	sbiw	r24, 0x01	; 1
 2be:	f1 f7       	brne	.-4      	; 0x2bc <lcd_init+0x2a>
 2c0:	00 c0       	rjmp	.+0      	; 0x2c2 <lcd_init+0x30>
 2c2:	00 00       	nop
    delay(LCD_DELAY_INIT); /* delay, busy flag can't be checked here */

    /* repeat last command */
    lcd_e_toggle();
 2c4:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <toggle_e>
 2c8:	8f ef       	ldi	r24, 0xFF	; 255
 2ca:	90 e0       	ldi	r25, 0x00	; 0
 2cc:	01 97       	sbiw	r24, 0x01	; 1
 2ce:	f1 f7       	brne	.-4      	; 0x2cc <lcd_init+0x3a>
 2d0:	00 c0       	rjmp	.+0      	; 0x2d2 <lcd_init+0x40>
 2d2:	00 00       	nop
    delay(LCD_DELAY_INIT_REP); /* delay, busy flag can't be checked here */

    /* repeat last command a third time */
    lcd_e_toggle();
 2d4:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <toggle_e>
 2d8:	8f ef       	ldi	r24, 0xFF	; 255
 2da:	90 e0       	ldi	r25, 0x00	; 0
 2dc:	01 97       	sbiw	r24, 0x01	; 1
 2de:	f1 f7       	brne	.-4      	; 0x2dc <lcd_init+0x4a>
 2e0:	00 c0       	rjmp	.+0      	; 0x2e2 <lcd_init+0x50>
 2e2:	00 00       	nop
    delay(LCD_DELAY_INIT_REP); /* delay, busy flag can't be checked here */

    /* now configure for 4bit mode */
    LCD_DATA0_PORT &= ~_BV(LCD_DATA0_PIN); // LCD_FUNCTION_4BIT_1LINE>>4
 2e4:	5c 98       	cbi	0x0b, 4	; 11
    lcd_e_toggle();
 2e6:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <toggle_e>
 2ea:	8f ef       	ldi	r24, 0xFF	; 255
 2ec:	90 e0       	ldi	r25, 0x00	; 0
 2ee:	01 97       	sbiw	r24, 0x01	; 1
 2f0:	f1 f7       	brne	.-4      	; 0x2ee <lcd_init+0x5c>
 2f2:	00 c0       	rjmp	.+0      	; 0x2f4 <lcd_init+0x62>
 2f4:	00 00       	nop
    /* Display with KS0073 controller requires special commands for enabling 4 line mode */
    lcd_command(KS0073_EXTENDED_FUNCTION_REGISTER_ON);
    lcd_command(KS0073_4LINES_MODE);
    lcd_command(KS0073_EXTENDED_FUNCTION_REGISTER_OFF);
    #else
    lcd_command(LCD_FUNCTION_DEFAULT); /* function set: display lines  */
 2f6:	88 e2       	ldi	r24, 0x28	; 40
 2f8:	0e 94 23 01 	call	0x246	; 0x246 <lcd_command>
    #endif
    lcd_command(LCD_DISP_OFF);     /* display off                  */
 2fc:	88 e0       	ldi	r24, 0x08	; 8
 2fe:	0e 94 23 01 	call	0x246	; 0x246 <lcd_command>
    lcd_clrscr();                  /* display clear                */
 302:	0e 94 31 01 	call	0x262	; 0x262 <lcd_clrscr>
    lcd_command(LCD_MODE_DEFAULT); /* set entry mode               */
 306:	86 e0       	ldi	r24, 0x06	; 6
 308:	0e 94 23 01 	call	0x246	; 0x246 <lcd_command>
    lcd_command(dispAttr);         /* display/cursor control       */
 30c:	8c 2f       	mov	r24, r28
 30e:	0e 94 23 01 	call	0x246	; 0x246 <lcd_command>
}/* lcd_init */
 312:	cf 91       	pop	r28
 314:	08 95       	ret

00000316 <main>:
 * Returns:  none
 **********************************************************************/
int main(void)
{
    // Initialize LCD display
    lcd_init(LCD_DISP_ON);
 316:	8c e0       	ldi	r24, 0x0C	; 12
 318:	0e 94 49 01 	call	0x292	; 0x292 <lcd_init>
    lcd_gotoxy(1, 0); lcd_puts("value:");
 31c:	60 e0       	ldi	r22, 0x00	; 0
 31e:	81 e0       	ldi	r24, 0x01	; 1
 320:	0e 94 27 01 	call	0x24e	; 0x24e <lcd_gotoxy>
 324:	80 e0       	ldi	r24, 0x00	; 0
 326:	91 e0       	ldi	r25, 0x01	; 1
 328:	0e 94 39 01 	call	0x272	; 0x272 <lcd_puts>
    lcd_gotoxy(3, 1); lcd_puts("key:");
 32c:	61 e0       	ldi	r22, 0x01	; 1
 32e:	83 e0       	ldi	r24, 0x03	; 3
 330:	0e 94 27 01 	call	0x24e	; 0x24e <lcd_gotoxy>
 334:	87 e0       	ldi	r24, 0x07	; 7
 336:	91 e0       	ldi	r25, 0x01	; 1
 338:	0e 94 39 01 	call	0x272	; 0x272 <lcd_puts>
    lcd_gotoxy(8, 0); lcd_puts("a");    // Put ADC value in decimal
 33c:	60 e0       	ldi	r22, 0x00	; 0
 33e:	88 e0       	ldi	r24, 0x08	; 8
 340:	0e 94 27 01 	call	0x24e	; 0x24e <lcd_gotoxy>
 344:	8c e0       	ldi	r24, 0x0C	; 12
 346:	91 e0       	ldi	r25, 0x01	; 1
 348:	0e 94 39 01 	call	0x272	; 0x272 <lcd_puts>
    lcd_gotoxy(13,0); lcd_puts("b");    // Put ADC value in hexadecimal
 34c:	60 e0       	ldi	r22, 0x00	; 0
 34e:	8d e0       	ldi	r24, 0x0D	; 13
 350:	0e 94 27 01 	call	0x24e	; 0x24e <lcd_gotoxy>
 354:	8e e0       	ldi	r24, 0x0E	; 14
 356:	91 e0       	ldi	r25, 0x01	; 1
 358:	0e 94 39 01 	call	0x272	; 0x272 <lcd_puts>
    lcd_gotoxy(8, 1); lcd_puts("c");    // Put button name here
 35c:	61 e0       	ldi	r22, 0x01	; 1
 35e:	88 e0       	ldi	r24, 0x08	; 8
 360:	0e 94 27 01 	call	0x24e	; 0x24e <lcd_gotoxy>
 364:	80 e1       	ldi	r24, 0x10	; 16
 366:	91 e0       	ldi	r25, 0x01	; 1
 368:	0e 94 39 01 	call	0x272	; 0x272 <lcd_puts>

    // Configure ADC to convert PC0[A0] analog value
    // Set ADC reference to AVcc
    ADMUX |= (1<<REFS0);
 36c:	ec e7       	ldi	r30, 0x7C	; 124
 36e:	f0 e0       	ldi	r31, 0x00	; 0
 370:	80 81       	ld	r24, Z
 372:	80 64       	ori	r24, 0x40	; 64
 374:	80 83       	st	Z, r24
    ADMUX &=~ (1<<REFS1);
 376:	80 81       	ld	r24, Z
 378:	8f 77       	andi	r24, 0x7F	; 127
 37a:	80 83       	st	Z, r24

    // Set input channel to ADC0
    ADMUX &=~ (1<<MUX3 | 1<<MUX2 |  1<<MUX1 |  1<<MUX0);
 37c:	80 81       	ld	r24, Z
 37e:	80 7f       	andi	r24, 0xF0	; 240
 380:	80 83       	st	Z, r24

    // Enable ADC module
    ADCSRA |= (1<<ADEN);
 382:	ea e7       	ldi	r30, 0x7A	; 122
 384:	f0 e0       	ldi	r31, 0x00	; 0
 386:	80 81       	ld	r24, Z
 388:	80 68       	ori	r24, 0x80	; 128
 38a:	80 83       	st	Z, r24

    // Enable conversion complete interrupt
    ADCSRA |= (1<<ADIE);
 38c:	80 81       	ld	r24, Z
 38e:	88 60       	ori	r24, 0x08	; 8
 390:	80 83       	st	Z, r24

    // Set clock prescaler to 128
    ADCSRA |= (1<<ADPS2 | 1<<ADPS1 | 1<<ADPS0);
 392:	80 81       	ld	r24, Z
 394:	87 60       	ori	r24, 0x07	; 7
 396:	80 83       	st	Z, r24

    // Configure 16-bit Timer/Counter1 to start ADC conversion
    // Set prescaler to 262 ms and enable overflow interrupt
    TIM1_overflow_262ms();
 398:	e1 e8       	ldi	r30, 0x81	; 129
 39a:	f0 e0       	ldi	r31, 0x00	; 0
 39c:	80 81       	ld	r24, Z
 39e:	8b 7f       	andi	r24, 0xFB	; 251
 3a0:	80 83       	st	Z, r24
 3a2:	80 81       	ld	r24, Z
 3a4:	83 60       	ori	r24, 0x03	; 3
 3a6:	80 83       	st	Z, r24
    TIM1_overflow_interrupt_enable();
 3a8:	ef e6       	ldi	r30, 0x6F	; 111
 3aa:	f0 e0       	ldi	r31, 0x00	; 0
 3ac:	80 81       	ld	r24, Z
 3ae:	81 60       	ori	r24, 0x01	; 1
 3b0:	80 83       	st	Z, r24

    // Initialize UART to asynchronous, 8N1, 9600
    uart_init(UART_BAUD_SELECT(9600,F_CPU));
 3b2:	87 e6       	ldi	r24, 0x67	; 103
 3b4:	90 e0       	ldi	r25, 0x00	; 0
 3b6:	0e 94 ab 00 	call	0x156	; 0x156 <uart_init>

    // Enables interrupts by setting the global interrupt mask
    sei();
 3ba:	78 94       	sei
 3bc:	ff cf       	rjmp	.-2      	; 0x3bc <main+0xa6>

000003be <__vector_13>:
 * Function: Timer/Counter1 overflow interrupt
 * Purpose:  Use single conversion mode and start conversion four times
 *           per second.
 **********************************************************************/
ISR(TIMER1_OVF_vect)
{
 3be:	1f 92       	push	r1
 3c0:	0f 92       	push	r0
 3c2:	0f b6       	in	r0, 0x3f	; 63
 3c4:	0f 92       	push	r0
 3c6:	11 24       	eor	r1, r1
 3c8:	8f 93       	push	r24
 3ca:	ef 93       	push	r30
 3cc:	ff 93       	push	r31
    // Start ADC conversion
    ADCSRA |= (1<<ADSC);
 3ce:	ea e7       	ldi	r30, 0x7A	; 122
 3d0:	f0 e0       	ldi	r31, 0x00	; 0
 3d2:	80 81       	ld	r24, Z
 3d4:	80 64       	ori	r24, 0x40	; 64
 3d6:	80 83       	st	Z, r24
}
 3d8:	ff 91       	pop	r31
 3da:	ef 91       	pop	r30
 3dc:	8f 91       	pop	r24
 3de:	0f 90       	pop	r0
 3e0:	0f be       	out	0x3f, r0	; 63
 3e2:	0f 90       	pop	r0
 3e4:	1f 90       	pop	r1
 3e6:	18 95       	reti

000003e8 <__vector_21>:
/**********************************************************************
 * Function: ADC complete interrupt
 * Purpose:  Display value on LCD and send it to UART.
 **********************************************************************/
ISR(ADC_vect)
{
 3e8:	1f 92       	push	r1
 3ea:	0f 92       	push	r0
 3ec:	0f b6       	in	r0, 0x3f	; 63
 3ee:	0f 92       	push	r0
 3f0:	11 24       	eor	r1, r1
 3f2:	0f 93       	push	r16
 3f4:	1f 93       	push	r17
 3f6:	2f 93       	push	r18
 3f8:	3f 93       	push	r19
 3fa:	4f 93       	push	r20
 3fc:	5f 93       	push	r21
 3fe:	6f 93       	push	r22
 400:	7f 93       	push	r23
 402:	8f 93       	push	r24
 404:	9f 93       	push	r25
 406:	af 93       	push	r26
 408:	bf 93       	push	r27
 40a:	ef 93       	push	r30
 40c:	ff 93       	push	r31
 40e:	cf 93       	push	r28
 410:	df 93       	push	r29
 412:	00 d0       	rcall	.+0      	; 0x414 <__LOCK_REGION_LENGTH__+0x14>
 414:	00 d0       	rcall	.+0      	; 0x416 <__LOCK_REGION_LENGTH__+0x16>
 416:	cd b7       	in	r28, 0x3d	; 61
 418:	de b7       	in	r29, 0x3e	; 62
    // WRITE YOUR CODE HERE
    uint16_t value = 0;
    char lcd_string[4]= "0000";
 41a:	80 e3       	ldi	r24, 0x30	; 48
 41c:	90 e3       	ldi	r25, 0x30	; 48
 41e:	9a 83       	std	Y+2, r25	; 0x02
 420:	89 83       	std	Y+1, r24	; 0x01
 422:	9c 83       	std	Y+4, r25	; 0x04
 424:	8b 83       	std	Y+3, r24	; 0x03
    value=ADC;
 426:	08 e7       	ldi	r16, 0x78	; 120
 428:	10 e0       	ldi	r17, 0x00	; 0
 42a:	f8 01       	movw	r30, r16
 42c:	80 81       	ld	r24, Z
 42e:	91 81       	ldd	r25, Z+1	; 0x01
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
 430:	4a e0       	ldi	r20, 0x0A	; 10
 432:	be 01       	movw	r22, r28
 434:	6f 5f       	subi	r22, 0xFF	; 255
 436:	7f 4f       	sbci	r23, 0xFF	; 255
 438:	0e 94 d1 02 	call	0x5a2	; 0x5a2 <__itoa_ncheck>
    itoa(value,lcd_string,10);
    lcd_gotoxy(8, 0);
 43c:	60 e0       	ldi	r22, 0x00	; 0
 43e:	88 e0       	ldi	r24, 0x08	; 8
 440:	0e 94 27 01 	call	0x24e	; 0x24e <lcd_gotoxy>
    lcd_puts("    ");
 444:	83 e1       	ldi	r24, 0x13	; 19
 446:	91 e0       	ldi	r25, 0x01	; 1
 448:	0e 94 39 01 	call	0x272	; 0x272 <lcd_puts>
    lcd_gotoxy(8, 0);
 44c:	60 e0       	ldi	r22, 0x00	; 0
 44e:	88 e0       	ldi	r24, 0x08	; 8
 450:	0e 94 27 01 	call	0x24e	; 0x24e <lcd_gotoxy>
    lcd_puts(lcd_string);
 454:	ce 01       	movw	r24, r28
 456:	01 96       	adiw	r24, 0x01	; 1
 458:	0e 94 39 01 	call	0x272	; 0x272 <lcd_puts>
    
    //Send ADC value to UART Tx
    uart_puts(lcd_string);
 45c:	ce 01       	movw	r24, r28
 45e:	01 96       	adiw	r24, 0x01	; 1
 460:	0e 94 d9 00 	call	0x1b2	; 0x1b2 <uart_puts>
    uart_puts(" ");
 464:	86 e1       	ldi	r24, 0x16	; 22
 466:	91 e0       	ldi	r25, 0x01	; 1
 468:	0e 94 d9 00 	call	0x1b2	; 0x1b2 <uart_puts>
    
    //Display ADC value in hexa at position "b"
    value=ADC;
 46c:	f8 01       	movw	r30, r16
 46e:	00 81       	ld	r16, Z
 470:	11 81       	ldd	r17, Z+1	; 0x01
 472:	40 e1       	ldi	r20, 0x10	; 16
 474:	be 01       	movw	r22, r28
 476:	6f 5f       	subi	r22, 0xFF	; 255
 478:	7f 4f       	sbci	r23, 0xFF	; 255
 47a:	c8 01       	movw	r24, r16
 47c:	0e 94 d1 02 	call	0x5a2	; 0x5a2 <__itoa_ncheck>
    itoa(value,lcd_string,16);
    lcd_gotoxy(13, 0);
 480:	60 e0       	ldi	r22, 0x00	; 0
 482:	8d e0       	ldi	r24, 0x0D	; 13
 484:	0e 94 27 01 	call	0x24e	; 0x24e <lcd_gotoxy>
    lcd_puts("   ");
 488:	84 e1       	ldi	r24, 0x14	; 20
 48a:	91 e0       	ldi	r25, 0x01	; 1
 48c:	0e 94 39 01 	call	0x272	; 0x272 <lcd_puts>
    lcd_gotoxy(13, 0);
 490:	60 e0       	ldi	r22, 0x00	; 0
 492:	8d e0       	ldi	r24, 0x0D	; 13
 494:	0e 94 27 01 	call	0x24e	; 0x24e <lcd_gotoxy>
    lcd_puts(lcd_string);
 498:	ce 01       	movw	r24, r28
 49a:	01 96       	adiw	r24, 0x01	; 1
 49c:	0e 94 39 01 	call	0x272	; 0x272 <lcd_puts>
    
    //Display what button was pressed at position "c"
    if (value==1023){
 4a0:	0f 3f       	cpi	r16, 0xFF	; 255
 4a2:	f3 e0       	ldi	r31, 0x03	; 3
 4a4:	1f 07       	cpc	r17, r31
 4a6:	89 f4       	brne	.+34     	; 0x4ca <__LOCK_REGION_LENGTH__+0xca>
        //none
        lcd_gotoxy(8, 1);
 4a8:	61 e0       	ldi	r22, 0x01	; 1
 4aa:	88 e0       	ldi	r24, 0x08	; 8
 4ac:	0e 94 27 01 	call	0x24e	; 0x24e <lcd_gotoxy>
        lcd_puts("     ");
 4b0:	82 e1       	ldi	r24, 0x12	; 18
 4b2:	91 e0       	ldi	r25, 0x01	; 1
 4b4:	0e 94 39 01 	call	0x272	; 0x272 <lcd_puts>
        lcd_gotoxy(8, 1);
 4b8:	61 e0       	ldi	r22, 0x01	; 1
 4ba:	88 e0       	ldi	r24, 0x08	; 8
 4bc:	0e 94 27 01 	call	0x24e	; 0x24e <lcd_gotoxy>
        lcd_puts("none");    
 4c0:	88 e1       	ldi	r24, 0x18	; 24
 4c2:	91 e0       	ldi	r25, 0x01	; 1
 4c4:	0e 94 39 01 	call	0x272	; 0x272 <lcd_puts>
 4c8:	2a c0       	rjmp	.+84     	; 0x51e <__LOCK_REGION_LENGTH__+0x11e>
    }
    if(value>=97){
 4ca:	c8 01       	movw	r24, r16
 4cc:	81 56       	subi	r24, 0x61	; 97
 4ce:	91 09       	sbc	r25, r1
 4d0:	04 97       	sbiw	r24, 0x04	; 4
 4d2:	80 f4       	brcc	.+32     	; 0x4f4 <__LOCK_REGION_LENGTH__+0xf4>
        if (value<=100){
            //up
            lcd_gotoxy(8, 1);
 4d4:	61 e0       	ldi	r22, 0x01	; 1
 4d6:	88 e0       	ldi	r24, 0x08	; 8
 4d8:	0e 94 27 01 	call	0x24e	; 0x24e <lcd_gotoxy>
            lcd_puts("     ");
 4dc:	82 e1       	ldi	r24, 0x12	; 18
 4de:	91 e0       	ldi	r25, 0x01	; 1
 4e0:	0e 94 39 01 	call	0x272	; 0x272 <lcd_puts>
            lcd_gotoxy(8, 1);
 4e4:	61 e0       	ldi	r22, 0x01	; 1
 4e6:	88 e0       	ldi	r24, 0x08	; 8
 4e8:	0e 94 27 01 	call	0x24e	; 0x24e <lcd_gotoxy>
            lcd_puts("up");
 4ec:	8d e1       	ldi	r24, 0x1D	; 29
 4ee:	91 e0       	ldi	r25, 0x01	; 1
 4f0:	0e 94 39 01 	call	0x272	; 0x272 <lcd_puts>
        }
    }
    if(value>=408){
 4f4:	c8 01       	movw	r24, r16
 4f6:	88 59       	subi	r24, 0x98	; 152
 4f8:	91 40       	sbci	r25, 0x01	; 1
 4fa:	04 97       	sbiw	r24, 0x04	; 4
 4fc:	80 f4       	brcc	.+32     	; 0x51e <__LOCK_REGION_LENGTH__+0x11e>
        if (value<=411){
            //left
            lcd_gotoxy(8, 1);
 4fe:	61 e0       	ldi	r22, 0x01	; 1
 500:	88 e0       	ldi	r24, 0x08	; 8
 502:	0e 94 27 01 	call	0x24e	; 0x24e <lcd_gotoxy>
            lcd_puts("     ");
 506:	82 e1       	ldi	r24, 0x12	; 18
 508:	91 e0       	ldi	r25, 0x01	; 1
 50a:	0e 94 39 01 	call	0x272	; 0x272 <lcd_puts>
            lcd_gotoxy(8, 1);
 50e:	61 e0       	ldi	r22, 0x01	; 1
 510:	88 e0       	ldi	r24, 0x08	; 8
 512:	0e 94 27 01 	call	0x24e	; 0x24e <lcd_gotoxy>
            lcd_puts("left");
 516:	80 e2       	ldi	r24, 0x20	; 32
 518:	91 e0       	ldi	r25, 0x01	; 1
 51a:	0e 94 39 01 	call	0x272	; 0x272 <lcd_puts>
        }
    }
    if(value>=255){
 51e:	0f 3f       	cpi	r16, 0xFF	; 255
 520:	11 05       	cpc	r17, r1
 522:	a0 f0       	brcs	.+40     	; 0x54c <__LOCK_REGION_LENGTH__+0x14c>
        if (value<=258){
 524:	03 30       	cpi	r16, 0x03	; 3
 526:	11 40       	sbci	r17, 0x01	; 1
 528:	18 f5       	brcc	.+70     	; 0x570 <__LOCK_REGION_LENGTH__+0x170>
            //down
            lcd_gotoxy(8, 1);
 52a:	61 e0       	ldi	r22, 0x01	; 1
 52c:	88 e0       	ldi	r24, 0x08	; 8
 52e:	0e 94 27 01 	call	0x24e	; 0x24e <lcd_gotoxy>
            lcd_puts("     ");
 532:	82 e1       	ldi	r24, 0x12	; 18
 534:	91 e0       	ldi	r25, 0x01	; 1
 536:	0e 94 39 01 	call	0x272	; 0x272 <lcd_puts>
            lcd_gotoxy(8, 1);
 53a:	61 e0       	ldi	r22, 0x01	; 1
 53c:	88 e0       	ldi	r24, 0x08	; 8
 53e:	0e 94 27 01 	call	0x24e	; 0x24e <lcd_gotoxy>
            lcd_puts("down");
 542:	85 e2       	ldi	r24, 0x25	; 37
 544:	91 e0       	ldi	r25, 0x01	; 1
 546:	0e 94 39 01 	call	0x272	; 0x272 <lcd_puts>
 54a:	12 c0       	rjmp	.+36     	; 0x570 <__LOCK_REGION_LENGTH__+0x170>
        }
    }
    else if(value==0){
 54c:	01 2b       	or	r16, r17
 54e:	81 f4       	brne	.+32     	; 0x570 <__LOCK_REGION_LENGTH__+0x170>
        //right
        lcd_gotoxy(8, 1);
 550:	61 e0       	ldi	r22, 0x01	; 1
 552:	88 e0       	ldi	r24, 0x08	; 8
 554:	0e 94 27 01 	call	0x24e	; 0x24e <lcd_gotoxy>
        lcd_puts("     ");
 558:	82 e1       	ldi	r24, 0x12	; 18
 55a:	91 e0       	ldi	r25, 0x01	; 1
 55c:	0e 94 39 01 	call	0x272	; 0x272 <lcd_puts>
        lcd_gotoxy(8, 1);
 560:	61 e0       	ldi	r22, 0x01	; 1
 562:	88 e0       	ldi	r24, 0x08	; 8
 564:	0e 94 27 01 	call	0x24e	; 0x24e <lcd_gotoxy>
        lcd_puts("right");
 568:	8a e2       	ldi	r24, 0x2A	; 42
 56a:	91 e0       	ldi	r25, 0x01	; 1
 56c:	0e 94 39 01 	call	0x272	; 0x272 <lcd_puts>
    }
}
 570:	0f 90       	pop	r0
 572:	0f 90       	pop	r0
 574:	0f 90       	pop	r0
 576:	0f 90       	pop	r0
 578:	df 91       	pop	r29
 57a:	cf 91       	pop	r28
 57c:	ff 91       	pop	r31
 57e:	ef 91       	pop	r30
 580:	bf 91       	pop	r27
 582:	af 91       	pop	r26
 584:	9f 91       	pop	r25
 586:	8f 91       	pop	r24
 588:	7f 91       	pop	r23
 58a:	6f 91       	pop	r22
 58c:	5f 91       	pop	r21
 58e:	4f 91       	pop	r20
 590:	3f 91       	pop	r19
 592:	2f 91       	pop	r18
 594:	1f 91       	pop	r17
 596:	0f 91       	pop	r16
 598:	0f 90       	pop	r0
 59a:	0f be       	out	0x3f, r0	; 63
 59c:	0f 90       	pop	r0
 59e:	1f 90       	pop	r1
 5a0:	18 95       	reti

000005a2 <__itoa_ncheck>:
 5a2:	bb 27       	eor	r27, r27
 5a4:	4a 30       	cpi	r20, 0x0A	; 10
 5a6:	31 f4       	brne	.+12     	; 0x5b4 <__itoa_ncheck+0x12>
 5a8:	99 23       	and	r25, r25
 5aa:	22 f4       	brpl	.+8      	; 0x5b4 <__itoa_ncheck+0x12>
 5ac:	bd e2       	ldi	r27, 0x2D	; 45
 5ae:	90 95       	com	r25
 5b0:	81 95       	neg	r24
 5b2:	9f 4f       	sbci	r25, 0xFF	; 255
 5b4:	0c 94 dd 02 	jmp	0x5ba	; 0x5ba <__utoa_common>

000005b8 <__utoa_ncheck>:
 5b8:	bb 27       	eor	r27, r27

000005ba <__utoa_common>:
 5ba:	fb 01       	movw	r30, r22
 5bc:	55 27       	eor	r21, r21
 5be:	aa 27       	eor	r26, r26
 5c0:	88 0f       	add	r24, r24
 5c2:	99 1f       	adc	r25, r25
 5c4:	aa 1f       	adc	r26, r26
 5c6:	a4 17       	cp	r26, r20
 5c8:	10 f0       	brcs	.+4      	; 0x5ce <__utoa_common+0x14>
 5ca:	a4 1b       	sub	r26, r20
 5cc:	83 95       	inc	r24
 5ce:	50 51       	subi	r21, 0x10	; 16
 5d0:	b9 f7       	brne	.-18     	; 0x5c0 <__utoa_common+0x6>
 5d2:	a0 5d       	subi	r26, 0xD0	; 208
 5d4:	aa 33       	cpi	r26, 0x3A	; 58
 5d6:	08 f0       	brcs	.+2      	; 0x5da <__utoa_common+0x20>
 5d8:	a9 5d       	subi	r26, 0xD9	; 217
 5da:	a1 93       	st	Z+, r26
 5dc:	00 97       	sbiw	r24, 0x00	; 0
 5de:	79 f7       	brne	.-34     	; 0x5be <__utoa_common+0x4>
 5e0:	b1 11       	cpse	r27, r1
 5e2:	b1 93       	st	Z+, r27
 5e4:	11 92       	st	Z+, r1
 5e6:	cb 01       	movw	r24, r22
 5e8:	0c 94 f6 02 	jmp	0x5ec	; 0x5ec <strrev>

000005ec <strrev>:
 5ec:	dc 01       	movw	r26, r24
 5ee:	fc 01       	movw	r30, r24
 5f0:	67 2f       	mov	r22, r23
 5f2:	71 91       	ld	r23, Z+
 5f4:	77 23       	and	r23, r23
 5f6:	e1 f7       	brne	.-8      	; 0x5f0 <strrev+0x4>
 5f8:	32 97       	sbiw	r30, 0x02	; 2
 5fa:	04 c0       	rjmp	.+8      	; 0x604 <strrev+0x18>
 5fc:	7c 91       	ld	r23, X
 5fe:	6d 93       	st	X+, r22
 600:	70 83       	st	Z, r23
 602:	62 91       	ld	r22, -Z
 604:	ae 17       	cp	r26, r30
 606:	bf 07       	cpc	r27, r31
 608:	c8 f3       	brcs	.-14     	; 0x5fc <strrev+0x10>
 60a:	08 95       	ret

0000060c <_exit>:
 60c:	f8 94       	cli

0000060e <__stop_program>:
 60e:	ff cf       	rjmp	.-2      	; 0x60e <__stop_program>
