
timers.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000206  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000001b2  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000206  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000238  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000078  00000000  00000000  00000278  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000973  00000000  00000000  000002f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000006e5  00000000  00000000  00000c63  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000347  00000000  00000000  00001348  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000100  00000000  00000000  00001690  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003f4  00000000  00000000  00001790  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000128  00000000  00000000  00001b84  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000058  00000000  00000000  00001cac  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 b0 00 	jmp	0x160	; 0x160 <__vector_13>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 7c 00 	call	0xf8	; 0xf8 <main>
  78:	0c 94 d7 00 	jmp	0x1ae	; 0x1ae <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <GPIO_config_output>:
 *           pin_num - Pin designation in the interval 0 to 7
 * Returns:  none
 **********************************************************************/
 void GPIO_write_high(volatile uint8_t *reg_name, uint8_t pin_num)
 {
    *reg_name = *reg_name | (1<<pin_num);
  80:	fc 01       	movw	r30, r24
  82:	40 81       	ld	r20, Z
  84:	21 e0       	ldi	r18, 0x01	; 1
  86:	30 e0       	ldi	r19, 0x00	; 0
  88:	02 c0       	rjmp	.+4      	; 0x8e <GPIO_config_output+0xe>
  8a:	22 0f       	add	r18, r18
  8c:	33 1f       	adc	r19, r19
  8e:	6a 95       	dec	r22
  90:	e2 f7       	brpl	.-8      	; 0x8a <GPIO_config_output+0xa>
  92:	24 2b       	or	r18, r20
  94:	20 83       	st	Z, r18
  96:	08 95       	ret

00000098 <GPIO_config_input_nopull>:
  98:	fc 01       	movw	r30, r24
  9a:	90 81       	ld	r25, Z
  9c:	21 e0       	ldi	r18, 0x01	; 1
  9e:	30 e0       	ldi	r19, 0x00	; 0
  a0:	02 c0       	rjmp	.+4      	; 0xa6 <GPIO_config_input_nopull+0xe>
  a2:	22 0f       	add	r18, r18
  a4:	33 1f       	adc	r19, r19
  a6:	6a 95       	dec	r22
  a8:	e2 f7       	brpl	.-8      	; 0xa2 <GPIO_config_input_nopull+0xa>
  aa:	20 95       	com	r18
  ac:	29 23       	and	r18, r25
  ae:	20 83       	st	Z, r18
  b0:	08 95       	ret

000000b2 <GPIO_write_low>:
  b2:	fc 01       	movw	r30, r24
  b4:	90 81       	ld	r25, Z
  b6:	21 e0       	ldi	r18, 0x01	; 1
  b8:	30 e0       	ldi	r19, 0x00	; 0
  ba:	02 c0       	rjmp	.+4      	; 0xc0 <GPIO_write_low+0xe>
  bc:	22 0f       	add	r18, r18
  be:	33 1f       	adc	r19, r19
  c0:	6a 95       	dec	r22
  c2:	e2 f7       	brpl	.-8      	; 0xbc <GPIO_write_low+0xa>
  c4:	20 95       	com	r18
  c6:	29 23       	and	r18, r25
  c8:	20 83       	st	Z, r18
  ca:	08 95       	ret

000000cc <GPIO_toggle>:
 *           pin_num - Pin designation in the interval 0 to 7
 * Returns:  none
 **********************************************************************/
 void GPIO_toggle(volatile uint8_t *reg_name, uint8_t pin_num)
 {
 *reg_name = *reg_name ^ (1<<pin_num);
  cc:	fc 01       	movw	r30, r24
  ce:	40 81       	ld	r20, Z
  d0:	21 e0       	ldi	r18, 0x01	; 1
  d2:	30 e0       	ldi	r19, 0x00	; 0
  d4:	02 c0       	rjmp	.+4      	; 0xda <GPIO_toggle+0xe>
  d6:	22 0f       	add	r18, r18
  d8:	33 1f       	adc	r19, r19
  da:	6a 95       	dec	r22
  dc:	e2 f7       	brpl	.-8      	; 0xd6 <GPIO_toggle+0xa>
  de:	24 27       	eor	r18, r20
  e0:	20 83       	st	Z, r18
  e2:	08 95       	ret

000000e4 <GPIO_read>:
 *           pin_num - Pin designation in the interval 0 to 7
 * Returns:  none
 **********************************************************************/
 uint8_t GPIO_read(volatile uint8_t *reg_name, uint8_t pin_num)
 {
    if ((*reg_name & (1<< pin_num))==0) return 0;
  e4:	fc 01       	movw	r30, r24
  e6:	80 81       	ld	r24, Z
  e8:	90 e0       	ldi	r25, 0x00	; 0
  ea:	02 c0       	rjmp	.+4      	; 0xf0 <GPIO_read+0xc>
  ec:	95 95       	asr	r25
  ee:	87 95       	ror	r24
  f0:	6a 95       	dec	r22
  f2:	e2 f7       	brpl	.-8      	; 0xec <GPIO_read+0x8>
    else {
        return 1;
    }    
    
  f4:	81 70       	andi	r24, 0x01	; 1
  f6:	08 95       	ret

000000f8 <main>:
 * Returns:  none
 **********************************************************************/
int main(void)
{
    // Configuration of LED(s) at port B
    GPIO_config_output(&DDRB, LED_D1);
  f8:	65 e0       	ldi	r22, 0x05	; 5
  fa:	84 e2       	ldi	r24, 0x24	; 36
  fc:	90 e0       	ldi	r25, 0x00	; 0
  fe:	0e 94 40 00 	call	0x80	; 0x80 <GPIO_config_output>
    GPIO_write_low(&PORTB, LED_D1);
 102:	65 e0       	ldi	r22, 0x05	; 5
 104:	85 e2       	ldi	r24, 0x25	; 37
 106:	90 e0       	ldi	r25, 0x00	; 0
 108:	0e 94 59 00 	call	0xb2	; 0xb2 <GPIO_write_low>
    
    //Config push button at port C
    GPIO_config_input_nopull(&DDRC, BTN_S3);
 10c:	63 e0       	ldi	r22, 0x03	; 3
 10e:	87 e2       	ldi	r24, 0x27	; 39
 110:	90 e0       	ldi	r25, 0x00	; 0
 112:	0e 94 4c 00 	call	0x98	; 0x98 <GPIO_config_input_nopull>

    // Configuration of 16-bit Timer/Counter1 for LED blinking
    // Set the overflow prescaler to 262 ms and enable interrupt
    TIM1_overflow_262ms();
 116:	e1 e8       	ldi	r30, 0x81	; 129
 118:	f0 e0       	ldi	r31, 0x00	; 0
 11a:	80 81       	ld	r24, Z
 11c:	8b 7f       	andi	r24, 0xFB	; 251
 11e:	80 83       	st	Z, r24
 120:	80 81       	ld	r24, Z
 122:	83 60       	ori	r24, 0x03	; 3
 124:	80 83       	st	Z, r24
    TIM1_overflow_interrupt_enable();
 126:	ef e6       	ldi	r30, 0x6F	; 111
 128:	f0 e0       	ldi	r31, 0x00	; 0
 12a:	80 81       	ld	r24, Z
 12c:	81 60       	ori	r24, 0x01	; 1
 12e:	80 83       	st	Z, r24

    // Enables interrupts by setting the global interrupt mask
    sei();
 130:	78 94       	sei
        {
            TIM1_overflow_33ms();
        }
        else //released
        {
            TIM1_overflow_262ms();
 132:	c1 e8       	ldi	r28, 0x81	; 129
 134:	d0 e0       	ldi	r29, 0x00	; 0
    // Infinite loop
    while (1)
    {
        /* Empty loop. All subsequent operations are performed exclusively 
         * inside interrupt service routines ISRs */
        if (GPIO_read(&PINC,BTN_S3)==0) // pressed button
 136:	63 e0       	ldi	r22, 0x03	; 3
 138:	86 e2       	ldi	r24, 0x26	; 38
 13a:	90 e0       	ldi	r25, 0x00	; 0
 13c:	0e 94 72 00 	call	0xe4	; 0xe4 <GPIO_read>
 140:	81 11       	cpse	r24, r1
 142:	07 c0       	rjmp	.+14     	; 0x152 <main+0x5a>
        {
            TIM1_overflow_33ms();
 144:	88 81       	ld	r24, Y
 146:	8a 7f       	andi	r24, 0xFA	; 250
 148:	88 83       	st	Y, r24
 14a:	88 81       	ld	r24, Y
 14c:	82 60       	ori	r24, 0x02	; 2
 14e:	88 83       	st	Y, r24
 150:	f2 cf       	rjmp	.-28     	; 0x136 <main+0x3e>
        }
        else //released
        {
            TIM1_overflow_262ms();
 152:	88 81       	ld	r24, Y
 154:	8b 7f       	andi	r24, 0xFB	; 251
 156:	88 83       	st	Y, r24
 158:	88 81       	ld	r24, Y
 15a:	83 60       	ori	r24, 0x03	; 3
 15c:	88 83       	st	Y, r24
 15e:	eb cf       	rjmp	.-42     	; 0x136 <main+0x3e>

00000160 <__vector_13>:
/**********************************************************************
 * Function: Timer/Counter1 overflow interrupt
 * Purpose:  Toggle D1 LED on Multi-function shield.
 **********************************************************************/
ISR(TIMER1_OVF_vect)
{
 160:	1f 92       	push	r1
 162:	0f 92       	push	r0
 164:	0f b6       	in	r0, 0x3f	; 63
 166:	0f 92       	push	r0
 168:	11 24       	eor	r1, r1
 16a:	2f 93       	push	r18
 16c:	3f 93       	push	r19
 16e:	4f 93       	push	r20
 170:	5f 93       	push	r21
 172:	6f 93       	push	r22
 174:	7f 93       	push	r23
 176:	8f 93       	push	r24
 178:	9f 93       	push	r25
 17a:	af 93       	push	r26
 17c:	bf 93       	push	r27
 17e:	ef 93       	push	r30
 180:	ff 93       	push	r31

    // WRITE YOUR CODE HERE
    GPIO_toggle(&PORTB, LED_D1);
 182:	65 e0       	ldi	r22, 0x05	; 5
 184:	85 e2       	ldi	r24, 0x25	; 37
 186:	90 e0       	ldi	r25, 0x00	; 0
 188:	0e 94 66 00 	call	0xcc	; 0xcc <GPIO_toggle>
 18c:	ff 91       	pop	r31
 18e:	ef 91       	pop	r30
 190:	bf 91       	pop	r27
 192:	af 91       	pop	r26
 194:	9f 91       	pop	r25
 196:	8f 91       	pop	r24
 198:	7f 91       	pop	r23
 19a:	6f 91       	pop	r22
 19c:	5f 91       	pop	r21
 19e:	4f 91       	pop	r20
 1a0:	3f 91       	pop	r19
 1a2:	2f 91       	pop	r18
 1a4:	0f 90       	pop	r0
 1a6:	0f be       	out	0x3f, r0	; 63
 1a8:	0f 90       	pop	r0
 1aa:	1f 90       	pop	r1
 1ac:	18 95       	reti

000001ae <_exit>:
 1ae:	f8 94       	cli

000001b0 <__stop_program>:
 1b0:	ff cf       	rjmp	.-2      	; 0x1b0 <__stop_program>
